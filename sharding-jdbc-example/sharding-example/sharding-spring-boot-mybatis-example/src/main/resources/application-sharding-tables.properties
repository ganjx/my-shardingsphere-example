#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# 数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names=ds

# 数据库连接池类名称
spring.shardingsphere.datasource.ds.type=com.zaxxer.hikari.HikariDataSource
# 数据库驱动类名
spring.shardingsphere.datasource.ds.driver-class-name=com.mysql.jdbc.Driver
# 数据库url连接
spring.shardingsphere.datasource.ds.jdbc-url=jdbc:mysql://localhost:3306/demo_ds?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
# 数据库用户名
spring.shardingsphere.datasource.ds.username=root
# 数据库密码
spring.shardingsphere.datasource.ds.password=123456

# 分布式主键 t_order
# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。
# 缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds.t_order_$->{0..1}
# 分片列名称 order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
# 分片算法行表达式，需符合groovy语法
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2}
# 自增列名称，缺省表示不使用自增主键生成器
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
# 自增列值生成器类型，缺省表示使用默认自增列值生成器。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID
# 1bit符号位 + 41bit时间戳位 + 10bit工作进程位 + 12bit序列号位
# SnowflakeShardingKeyGenerator
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order.key-generator.props.worker.id=123
spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds.t_order_item_$->{0..1}
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item_$->{order_id % 2}
spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=order_item_id
spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order_item.key-generator.props.worker.id=123

# 绑定表：分片规则一致的主表和子表
spring.shardingsphere.sharding.binding-tables=t_order,t_order_item
# 广播表：所有分片的数据源中都存在的表，表结构和表中的数据在每个数据库中均完全一致。
spring.shardingsphere.sharding.broadcast-tables=t_address

# 是否开启SQL显示，默认值: false
spring.shardingsphere.props.sql.show=true
